exec("ability.egg");
exec("tile.egg");
exec("abilities/snapshot.egg");
exec("abilities/trainedshot.egg");
exec("abilities/overwatch.egg");
exec("abilities/grenade.egg");
exec("team.egg");
exec("unit.egg");
exec("editor.egg");
exec("targetting.egg");
exec("turn.egg");

printCompilationErrors();

function r() {
	hotReload();
}

function onReload() {
	exec("scripts/main.egg");
}

function init() {
	// unit stuff
	$Unit::HoveredTile = null;

	$Unit::TargetSprite = null;
	$Unit::SelectedTarget = null;

	$Unit::SelectedAbility = null; // try to use the same ability when we cycle through units
	$Unit::SprintBorderColor = {0; 0; 1; 1};

	schedule(100, "teamInit");
	schedule(100, "tileInit");

	// tile stuff
	$Tile::Directions = new Array();
	$Tile::Directions.push(
		{0; -1; 0}, // north
		{1; 0; 0}, // east
		{0; 1; 0}, // south
		{-1; 0; 0} // west
	);

	$Facing::North = 1;
	$Facing::East = 2;
	$Facing::South = 3;
	$Facing::West = 4;
	$Facing::NorthEast = 5;
	$Facing::SouthEast = 6;
	$Facing::SouthWest = 7;
	$Facing::NorthWest = 8;

	// editor stuff
	$Editor::Enabled = false;

	$Editor::GhostTile = null;
	$Editor::GhostLine = new Array();
	$Editor::MouseDown = false;

	$Editor::LastStart = null;
	$Editor::LastEnd = null;
	$Editor::LastDirection = null;
	$Editor::LastAxis  = null;

	// cover enums
	$Cover::None = 0;					// the unit is not behind any cover
	$Cover::Half = 1;					// the unit is behind a half-height wall
	$Cover::FullPartial = 2;	// the unit is behind a wall, but is on a corner and is still visible
	$Cover::Full = 3;					// the unit is not visible and is completely behind a wall
	
	addKeybind("chunk.rotateClockwise", "q", "onRotateClockwise");
	addKeybind("chunk.rotateClockwise", "right-joystick-d-pad-left", "onRotateClockwise");

	addKeybind("chunk.rotateCounterClockwise", "e", "onRotateCounterClockwise");
	addKeybind("chunk.rotateCounterClockwise", "right-joystick-d-pad-right", "onRotateCounterClockwise");

	addKeybind("unit.gamepadPressTile", "b-button", "onGamepadPressTile");

	addKeybind("unit.gamepadUseAbility", "a-button", "onGamepadUseAbility");

	addKeybind("unit.nextAbility", "y-button", "onNextAbility");

	addKeybind("unit.previousAbility", "x-button", "onPreviousAbility");

	addKeybind("unit.resetAP", "delete", "resetUnitAP");

	addKeybind("editor.mouseDown", "left-mouse-button", "onEditorMouseDown");	
}

function HTMLElement::onClick(%this) {
	return true;
}

function length(%a) {
	return mSqrt(mPow(%a[0], 2) + mPow(%a[1], 2) + mPow(%a[2], 2));
}

function normalize(%a) {
	%length = length(%a);
	return { %a[0] / %length; %a[1] / %length; %a[2] / %length };
}

function dot(%a, %b) {
	return %a[0] * %b[0] + %a[1] * %b[1] + %a[2] * %b[2];
}

function distance(%a, %b) {
	return mSqrt(mPow(%a[0] - %b[0], 2) + mPow(%a[1] - %b[1], 2) + mPow(%a[2] - %b[2], 2));
}

function isTileSelectable(%position) {
	%character = getChunkContainer().getCharacter(%position + {0; 0; 1});
	if(isObject(%character)) {
		return %character;
	}
	return null;
}

function onRotateClockwise(%state) {
	if(%state) {
		getChunkContainer().setRotation((getChunkContainer().getRotation() + 1) % 4);
	}
}

function onRotateCounterClockwise(%state) {
	if(%state) {
		%rotation = getChunkContainer().getRotation() - 1;
		if(%rotation < 0) {
			%rotation += 4;
		}
		getChunkContainer().setRotation(%rotation);
	}
}

function onGamepadPressTile(%state) {
	if(!%state) {
		return;
	}

	%position = $Unit::HoveredTile;
	if(!isTileSelectable(%position)) {
		%selectedCharacter = getChunkContainer().getSelectedCharacter();
		if(isObject(%selectedCharacter)) {
			%selectedCharacter.move(%position);
		}
	}
}

function onGamepadUseAbility(%state) {
	if(!%state) {
		return;
	}

	%selectedCharacter = getChunkContainer().getSelectedCharacter();
	if(isObject(%selectedCharacter) && %selectedCharacter.selectedAbility.usable($Unit::SelectedTarget)) {
		%selectedCharacter.selectedAbility.use($Unit::SelectedTarget);

		if(!isObject($Unit::SelectedTarget)) {
			selectTarget(null);
		}
	}
}

function onNextAbility(%state) {
	if(!%state) {
		return;
	}

	%character = getChunkContainer().getSelectedCharacter();
	if(%character) {
		%character.selectNextAbility();
		playSound("Flip");
	}
}

function onPreviousAbility(%state) {
	if(!%state) {
		return;
	}

	%character = getChunkContainer().getSelectedCharacter();
	if(%character) {
		%character.selectPreviousAbility();
		playSound("Flip");
	}
}

function resetUnitAP(%state) {
	if(!%state) {
		return;
	}

	getChunkContainer().getSelectedCharacter().setAP(2);
}

function onSelectTile(%position, %browsing, %controller) {
	if(%browsing) {
		$Unit::HoveredTile = %position;
		%character = getChunkContainer().getSelectedCharacter();
		if(isObject(%character)) {
			%path = %character.getPath(%position);
			%character.path = %path;
			if(isObject(%path) && %character.lastPath != %character.path) {
				%path.showDots();
			}
			%character.lastPath = %character.path;
		}

		if($Unit::SelectedAbility.useBrowse) {
			$Unit::SelectedAbility.browse(%position);
		}

		$Tile::TileSelectionIcon.setPosition(%position);
		$Tile::TileSelectionIcon.setColor({1; 1; 1; 1});
	}
	else {
		%character = isTileSelectable(%position);
		%noAbilitySelect = false;
		if(isObject(%character)) {
			if(getChunkContainer().getPlayerTeam().has(%character)) {
				getChunkContainer().selectCharacter(%character);
				playSound("SelectUnit");
				%noAbilitySelect = true;
			}
			else if(getChunkContainer().getEnemyTeam().has(%character)) {
				selectTarget(%character);
				playSound("SelectEnemy");
			}

			$Tile::TileSelectionIcon.setPosition(%position);
			$Tile::TileSelectionIcon.setColor({1; 1; 1; 1});
		}

		if(!%noAbilitySelect) {
			%ours = getChunkContainer().getSelectedCharacter();
			if(%ours && $Unit::SelectedAbility.useSelect) {
				$Unit::SelectedAbility.selectTile(%position);
			}
		}
	}
}

function onRightClickTile(%position) {
	if(isObject(getChunkContainer().getSelectedCharacter())) {
		%character = getChunkContainer().getSelectedCharacter();
		%character.move(%position);
	}
}
