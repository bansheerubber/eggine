function Unit::onAdd(%this) {
	%this.abilities = new Array();
	%ability = new SnapshotAbility();
	%ability.owner = %this;
	%this.abilities.push(%ability);

	%this.maxMoves = 5;
	%this.maxSprintMoves = 15;
	%this.moves = 5;
	%this.sprintMoves = 15;

	%this.ap = 2;

	%this.setMaxHealth(getRandom(3, 8));
	%this.setHealth(getRandom(2, %this.getMaxHealth() - 1));
}

function Unit::updateUI(%this) { // if we're selected, then update the UI
	if(getChunkContainer().getSelectedCharacter() == %this) {
		%this.getDestinations().showBorder();
		%this.getSprintDestinations().showBorder($Unit::SprintBorderColor);
		%this.updateTargettingUI();
		%this.updateAbilityList();
	}
}

function Unit::onSelect(%this) {
	%this.updateUI();
}

function Unit::onDeSelect(%this) {
	%this.getDestinations().hideBorder();
	%this.getSprintDestinations().hideBorder();
	%this.path = %this.getPath($Unit::HoveredTile);
	%this.path.hideBorder();
}

// return 2 if behind impenetrable cover, return 1 if behind cover but can still be shot, return 0 if no cover at all
function Unit::inCover(%this, %attacker) {
	%result = raycast(%attacker.getPosition(), %this.getPosition());
	if(%result == null) {
		return 0;
	}

	%direction = Tile::getAdjacentDirectionIndex(%this.getPosition(), %result);
	if(%direction == -1) { // if not directly adjacent, then we can't shoot past the cover
		return 2;
	}

	%leftTile = $Tile::Directions[%direction - 1 < 0 ? 3 : %direction - 1] + %result;
	%rightTile = $Tile::Directions[(%direction + 1) % 4] + %result;

	%leftTileDistance = distance(%leftTile, %attacker.getPosition());
	%rightTileDistance = distance(%rightTile, %attacker.getPosition());

	if(Tile::isTile(%leftTile) && Tile::isTile(%rightTile)) {
		return 2;
	}
	else if(%leftTileDistance == %rightTileDistance) {
		return 1;
	}
	// if the left tile exists and the attacker is closer to that tile, then they don't have a line of fire on us
	else if(Tile::isTile(%leftTile) && %leftTileDistance < %rightTileDistance) {
		return 2;
	}
	// if the right tile exists and the attacker is closer to that tile, then they don't have a line of fire on us
	else if(Tile::isTile(%rightTile) && %rightTileDistance < %leftTileDistance) {
		return 2;
	}
	else { // if one of the tiles is empty, then we're partially in cover
		return 1;
	}
}

function Unit::addAP(%this, %ap) {
	%this.setAP(%this.ap + %ap);
}

function Unit::setAP(%this, %ap) {
	if(%ap >= 2) {
		%this.ap = 2;
		%this.moves = %this.maxMoves;
		%this.sprintMoves = %this.maxSprintMoves;
	}
	else if(%ap == 1) {
		%this.ap = 1;
		%this.moves = 0;
		%this.sprintMoves = %this.maxSprintMoves - %this.maxMoves;
	}
	else { // 0 or negative ap
		%this.sprintMoves = 0;
		%this.moves = 0;
		%this.ap = 0;
	}

	%this.updateUI();
}

function Unit::move(%this, %position) {
	%unitPosition = %this.getPosition();
	%distance = (%this.path.size() - 1);

	if(!isObject(%this.path)) {
		return;
	}

	if(%this.getDestinations().has(%position) && %this.moves >= %distance) {
		%this.addAP(-1);
		%this.setPosition(%position + {0; 0; 1});
	}
	else if(%this.getSprintDestinations().has(%position) && %this.sprintMoves >= %distance) {
		%this.addAP(-2);
		%this.setPosition(%position + {0; 0; 1});
	}
}

function Unit::updateTargettingUI(%this) {
	getHTMLElementById("enemy-icons").clear();
	%html = "";
	%team = getChunkContainer().getEnemyTeam();
	for(%i = 0; %i < %team.size(); %i++) {
		%enemy = %team.get(%i);
		// check if any of our abilities are usable against the enemy
		for(%j = 0; %j < %this.abilities.size(); %j++) {
			%ability = %this.abilities[%j];
			if(!%ability.usable(%enemy)) {
				continue;
			}

			%html = %html @ "<img enemy-id=\"" @ %i @ "\" es-class=\"EnemyIconElement\" class=\"enemy-icon\" src=\"/images/alien.png\" />";
		}
	}
	getHTMLElementById("enemy-icons").createChild(%html);
}

function Unit::updateAbilityList(%this) {
	getHTMLElementById("player-abilities").clear();
	%this.shownAbilities = 0;
	for(%i = 0; %i < %this.abilities.size(); %i++) {
		%ability = %this.abilities[%i];
		%disabled = %ability.usable($Unit::SelectedTarget) ? "" : "disabled";
		getHTMLElementById("player-abilities").createChild("<img es-class=\"AbilityElement\" ability-index=\"" @ %i @ "\" class=\"ability-icon " @ %disabled @ "\" src=\"/images/" @ %ability.icon @ "\" />");

		if(%ability.name == $Unit::SelectedAbility.name) {
			%this.selectAbility(%i); // try to select same ability on same target between units
			%selected = true;
		}

		%this.shownAbilities++;
	}

	if(!%selected) { // if we couldn't select our selected ability, then it is missing from the HTML ability list and we should hide the ability UI
		%this.selectAbility(-1);
	}
}

function Unit::selectAbility(%this, %index) {
	%name = getHTMLElementById("ability-description-name");
	%name.clear();
	%description = getHTMLElementById("ability-description-body");
	%description.clear();
	%button = getHTMLElementById("ability-description-button");
	%button.clear();

	if(%index == -1) {
		%this.selectedAbility = null;
		getHTMLElementById("ability-description").setStyleAttribute("display", "none");
		return;
	}
	getHTMLElementById("ability-description").setStyleAttribute("display", "block");

	if(%this.abilities[%index]) {
		%ability = %this.abilities[%index];
		%name.createChild(%ability.name);
		%description.createChild(%ability.description($Unit::SelectedTarget));

		if(%ability.usable($Unit::SelectedTarget)) {
			%button.createChild(%ability.actionName($Unit::SelectedTarget));
			%button.setStyleAttribute("display", "inline-block");
		}
		else {
			%button.setStyleAttribute("display", "none");
		}

		%this.selectedAbility = %ability;
		$Unit::SelectedAbility = %ability;
	}
	else {
		%this.selectedAbility = null;
	}
}

function Unit::selectNextAbility(%this) {
	if(%this.shownAbilities == 0) {
		return;
	}

	if(%this.selectedAbility == null) {
		%this.selectAbility(0);
		return;
	}
	
	for(%i = 0; %i < %this.abilities.size(); %i++) {
		if(%this.selectedAbility == %this.abilities[%i]) {
			%index = %i;
			break;
		}
	}

	%next = (%index + 1) % %this.abilities.size();
	%this.selectAbility(%next);
}

function Unit::selectPreviousAbility(%this) {
	if(%this.shownAbilities == 0) {
		return;
	}

	if(%this.selectedAbility == null) {
		%this.selectAbility(0);
		return;
	}
	
	for(%i = 0; %i < %this.abilities.size(); %i++) {
		if(%this.selectedAbility == %this.abilities[%i]) {
			%index = %i;
			break;
		}
	}

	%prev = (%index - 1);
	if(%prev < 0) {
		%prev = %this.abilities.size() - 1;
	}
	%this.selectAbility(%prev);
}

package unit {
	function Unit::setPosition(%this, %position) {
		Parent::setPosition(%this, %position);

		if(%this == getChunkContainer().getSelectedCharacter()) {
			%this.updateUI();
			%this.path = %this.getPath($Unit::HoveredTile);
			if(%this.path) {
				%this.path.showDots();
			}
		}
	}

	function ChunkContainer::selectCharacter(%this, %character) {
		%test = getChunkContainer().getSelectedCharacter();
		if(isObject(%test)) {
			%test.onDeSelect();
		}
		
		Parent::selectCharacter(%this, %character);

		%character.onSelect();
	}
};
