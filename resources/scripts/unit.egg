$Unit::SelectedAbility = null; // try to use the same ability when we cycle through units

function Unit::onAdd(%this) {
	%this.abilities = new Array();
	%ability = new SnapshotAbility();
	%ability.owner = %this;
	%this.abilities.push(%ability);

	%this.maxMoves = 5;
	%this.moves = 5;
}

function Unit::onSelect(%this) {
	%this.updateTargettingUI();
	%this.getDestinations(true).showBorder();
}

function Unit::onDeSelect(%this) {
	%this.getDestinations().hideBorder();
	%this.path = %this.getPath($Unit::HoveredTile);
}

function Unit::move(%this, %position) {
	%unitPosition = %this.getPosition();
	if(%this.getDestinations().has(%position) && isObject(%this.path) && %this.moves >= (%distance = (%this.path.size() - 1))) {
		%this.setMoves(%this.moves - %distance);
		%this.moves -= %distance;

		%this.setPosition(%position + {0; 0; 1});
	}
}

function Unit::updateTargettingUI(%this) {
	getHTMLElementById("enemy-icons").clear();
	%html = "";
	%team = getChunkContainer().getEnemyTeam();
	for(%i = 0; %i < %team.size(); %i++) {
		%enemy = %team.get(%i);
		// check if any of our abilities are usable against the enemy
		for(%j = 0; %j < %this.abilities.size(); %j++) {
			%ability = %this.abilities[%j];
			if(!%ability.usable(%enemy)) {
				continue;
			}

			%html = %html @ "<img enemy-id=\"" @ %i @ "\" es-class=\"EnemyIconElement\" class=\"enemy-icon\" src=\"/images/alien.png\" />";
		}
	}
	getHTMLElementById("enemy-icons").createChild(%html);

	selectTarget($Unit::SelectedTarget); // re-select target
}

function Unit::updateAbilityList(%this) {
	getHTMLElementById("player-abilities").clear();
	%this.shownAbilities = 0;
	for(%i = 0; %i < %this.abilities.size(); %i++) {
		%ability = %this.abilities[%i];
		%disabled = %ability.usable($Unit::SelectedTarget) ? "" : "disabled";
		getHTMLElementById("player-abilities").createChild("<img es-class=\"AbilityElement\" ability-index=\"" @ %i @ "\" class=\"ability-icon " @ %disabled @ "\" src=\"/images/" @ %ability.icon @ "\" />");

		if(%ability.name == $Unit::SelectedAbility.name) {
			%this.selectAbility(%i); // try to select same ability on same target between units
			%selected = true;
		}

		%this.shownAbilities++;
	}

	if(!%selected) { // if we couldn't select our selected ability, then it is missing from the HTML ability list and we should hide the ability UI
		%this.selectAbility(-1);
	}
}

function Unit::selectAbility(%this, %index) {
	%name = getHTMLElementById("ability-description-name");
	%name.clear();
	%description = getHTMLElementById("ability-description-body");
	%description.clear();
	%button = getHTMLElementById("ability-description-button");
	%button.clear();

	if(%index == -1) {
		%this.selectedAbility = null;
		getHTMLElementById("ability-description").setStyleAttribute("display", "none");
		return;
	}
	getHTMLElementById("ability-description").setStyleAttribute("display", "block");

	if(%this.abilities[%index]) {
		%ability = %this.abilities[%index];
		%name.createChild(%ability.name);
		%description.createChild(%ability.description($Unit::SelectedTarget));

		if(%ability.usable($Unit::SelectedTarget)) {
			%button.createChild(%ability.actionName($Unit::SelectedTarget));
			%button.setStyleAttribute("display", "inline-block");
		}
		else {
			%button.setStyleAttribute("display", "none");
		}

		%this.selectedAbility = %ability;
		$Unit::SelectedAbility = %ability;
	}
	else {
		%this.selectedAbility = null;
	}
}

function Unit::selectNextAbility(%this) {
	if(%this.shownAbilities == 0) {
		return;
	}

	if(%this.selectedAbility == null) {
		%this.selectAbility(0);
		return;
	}
	
	for(%i = 0; %i < %this.abilities.size(); %i++) {
		if(%this.selectedAbility == %this.abilities[%i]) {
			%index = %i;
			break;
		}
	}

	%next = (%index + 1) % %this.abilities.size();
	%this.selectAbility(%next);
}

function Unit::selectPreviousAbility(%this) {
	if(%this.shownAbilities == 0) {
		return;
	}

	if(%this.selectedAbility == null) {
		%this.selectAbility(0);
		return;
	}
	
	for(%i = 0; %i < %this.abilities.size(); %i++) {
		if(%this.selectedAbility == %this.abilities[%i]) {
			%index = %i;
			break;
		}
	}

	%prev = (%index - 1);
	if(%prev < 0) {
		%prev = %this.abilities.size() - 1;
	}
	%this.selectAbility(%prev);
}

package unit {
	function Unit::setMoves(%this, %moves) {
		Parent::setMoves(%this, %moves);

		if(%this == getChunkContainer().getSelectedCharacter()) {
			%this.getDestinations().showBorder(); // re-render border if we move
			%this.path = %this.getPath($Unit::HoveredTile);
			if(%this.path) {
				%this.path.showDots();
			}
		}
	}

	function Unit::setPosition(%this, %position) {
		Parent::setPosition(%this, %position);

		if(%this == getChunkContainer().getSelectedCharacter()) {
			%this.getDestinations().showBorder(); // re-render border if we move
			%this.path = %this.getPath($Unit::HoveredTile);
			if(%this.path) {
				%this.path.showDots();
			}
			%this.updateTargettingUI();
		}
	}

	function ChunkContainer::selectCharacter(%this, %character) {
		%test = getChunkContainer().getSelectedCharacter();
		if(isObject(%test)) {
			%test.onDeSelect();
		}
		
		Parent::selectCharacter(%this, %character);

		%character.onSelect();
	}
};
