- the rendering system was originally implemented as a bunch of lightly connected components working together to render the scene so that if needed, i could revisit this project and just hack pieces off of it as needed for a new one. the introduction of render state sort of destroyed this. ideally, there should be no super tight integration like we have right now. `friend State` should not exist
- the VulkanPipeline class separation was only done to reduce code file bloat and for no other reason. it doesn't make sense for it to be its own class, especially since where we create a new instance (inside render state) we already know all the information we are passing into the pipeline object. this is redundant abstraction